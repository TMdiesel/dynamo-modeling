// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for OrderResponseStatus.
const (
	OrderResponseStatusCancelled OrderResponseStatus = "cancelled"
	OrderResponseStatusConfirmed OrderResponseStatus = "confirmed"
	OrderResponseStatusDelivered OrderResponseStatus = "delivered"
	OrderResponseStatusPending   OrderResponseStatus = "pending"
	OrderResponseStatusShipped   OrderResponseStatus = "shipped"
)

// Defines values for UpdateOrderStatusJSONBodyStatus.
const (
	UpdateOrderStatusJSONBodyStatusCancelled UpdateOrderStatusJSONBodyStatus = "cancelled"
	UpdateOrderStatusJSONBodyStatusConfirmed UpdateOrderStatusJSONBodyStatus = "confirmed"
	UpdateOrderStatusJSONBodyStatusDelivered UpdateOrderStatusJSONBodyStatus = "delivered"
	UpdateOrderStatusJSONBodyStatusPending   UpdateOrderStatusJSONBodyStatus = "pending"
	UpdateOrderStatusJSONBodyStatusShipped   UpdateOrderStatusJSONBodyStatus = "shipped"
)

// CustomerRequest defines model for CustomerRequest.
type CustomerRequest struct {
	// Email Customer email address (must be unique)
	Email openapi_types.Email `json:"email"`

	// Name Customer full name
	Name string `json:"name"`
}

// CustomerResponse defines model for CustomerResponse.
type CustomerResponse struct {
	// CreatedAt Customer creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// Email Customer email address
	Email openapi_types.Email `json:"email"`

	// Id Customer unique identifier
	Id string `json:"id"`

	// Name Customer full name
	Name string `json:"name"`

	// UpdatedAt Customer last update timestamp
	UpdatedAt time.Time `json:"updated_at"`
}

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code string `json:"code"`

	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Message Human-readable error message
	Message string `json:"message"`
}

// OrderItemRequest defines model for OrderItemRequest.
type OrderItemRequest struct {
	// ProductId Product unique identifier
	ProductId string `json:"product_id"`

	// Quantity Quantity to order
	Quantity int `json:"quantity"`
}

// OrderItemResponse defines model for OrderItemResponse.
type OrderItemResponse struct {
	// ProductId Product unique identifier
	ProductId string `json:"product_id"`

	// Quantity Ordered quantity
	Quantity int `json:"quantity"`

	// TotalPrice Total price for this item in cents
	TotalPrice int `json:"total_price"`

	// UnitPrice Price per unit in cents
	UnitPrice int `json:"unit_price"`
}

// OrderRequest defines model for OrderRequest.
type OrderRequest struct {
	// CustomerId Customer unique identifier
	CustomerId string `json:"customer_id"`

	// Items Order items
	Items []OrderItemRequest `json:"items"`
}

// OrderResponse defines model for OrderResponse.
type OrderResponse struct {
	// CreatedAt Order creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// CustomerId Customer unique identifier
	CustomerId string `json:"customer_id"`

	// Id Order unique identifier
	Id string `json:"id"`

	// Items Order items
	Items []OrderItemResponse `json:"items"`

	// Status Order status
	Status OrderResponseStatus `json:"status"`

	// TotalAmount Total order amount in cents
	TotalAmount int `json:"total_amount"`

	// UpdatedAt Order last update timestamp
	UpdatedAt time.Time `json:"updated_at"`
}

// OrderResponseStatus Order status
type OrderResponseStatus string

// ProductRequest defines model for ProductRequest.
type ProductRequest struct {
	// Description Product description
	Description string `json:"description"`

	// Name Product name
	Name string `json:"name"`

	// Price Product price in cents (e.g., 1999 = $19.99)
	Price int `json:"price"`

	// Stock Available stock quantity
	Stock int `json:"stock"`
}

// ProductResponse defines model for ProductResponse.
type ProductResponse struct {
	// CreatedAt Product creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// Description Product description
	Description string `json:"description"`

	// Id Product unique identifier
	Id string `json:"id"`

	// Name Product name
	Name string `json:"name"`

	// Price Product price in cents
	Price int `json:"price"`

	// Stock Available stock quantity
	Stock int `json:"stock"`

	// UpdatedAt Product last update timestamp
	UpdatedAt time.Time `json:"updated_at"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Code             string `json:"code"`
	Message          string `json:"message"`
	ValidationErrors []struct {
		// Field Field name that failed validation
		Field *string `json:"field,omitempty"`

		// Message Validation error message
		Message *string `json:"message,omitempty"`
	} `json:"validation_errors"`
}

// ListCustomersParams defines parameters for ListCustomers.
type ListCustomersParams struct {
	// Limit Maximum number of customers to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of customers to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetCustomerOrdersParams defines parameters for GetCustomerOrders.
type GetCustomerOrdersParams struct {
	// Limit Maximum number of orders to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of orders to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// ListOrdersParams defines parameters for ListOrders.
type ListOrdersParams struct {
	// CustomerId Filter orders by customer ID
	CustomerId *string `form:"customer_id,omitempty" json:"customer_id,omitempty"`

	// Limit Maximum number of orders to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of orders to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// UpdateOrderStatusJSONBody defines parameters for UpdateOrderStatus.
type UpdateOrderStatusJSONBody struct {
	// Status New order status
	Status UpdateOrderStatusJSONBodyStatus `json:"status"`
}

// UpdateOrderStatusJSONBodyStatus defines parameters for UpdateOrderStatus.
type UpdateOrderStatusJSONBodyStatus string

// ListProductsParams defines parameters for ListProducts.
type ListProductsParams struct {
	// Limit Maximum number of products to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of products to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CreateCustomerJSONRequestBody defines body for CreateCustomer for application/json ContentType.
type CreateCustomerJSONRequestBody = CustomerRequest

// UpdateCustomerJSONRequestBody defines body for UpdateCustomer for application/json ContentType.
type UpdateCustomerJSONRequestBody = CustomerRequest

// CreateOrderJSONRequestBody defines body for CreateOrder for application/json ContentType.
type CreateOrderJSONRequestBody = OrderRequest

// UpdateOrderStatusJSONRequestBody defines body for UpdateOrderStatus for application/json ContentType.
type UpdateOrderStatusJSONRequestBody UpdateOrderStatusJSONBody

// CreateProductJSONRequestBody defines body for CreateProduct for application/json ContentType.
type CreateProductJSONRequestBody = ProductRequest

// UpdateProductJSONRequestBody defines body for UpdateProduct for application/json ContentType.
type UpdateProductJSONRequestBody = ProductRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all customers
	// (GET /customers)
	ListCustomers(ctx echo.Context, params ListCustomersParams) error
	// Create a new customer
	// (POST /customers)
	CreateCustomer(ctx echo.Context) error
	// Delete customer
	// (DELETE /customers/{customerId})
	DeleteCustomer(ctx echo.Context, customerId string) error
	// Get customer by ID
	// (GET /customers/{customerId})
	GetCustomer(ctx echo.Context, customerId string) error
	// Update customer
	// (PUT /customers/{customerId})
	UpdateCustomer(ctx echo.Context, customerId string) error
	// Get customer orders
	// (GET /customers/{customerId}/orders)
	GetCustomerOrders(ctx echo.Context, customerId string, params GetCustomerOrdersParams) error
	// List orders
	// (GET /orders)
	ListOrders(ctx echo.Context, params ListOrdersParams) error
	// Create a new order
	// (POST /orders)
	CreateOrder(ctx echo.Context) error
	// Get order by ID
	// (GET /orders/{orderId})
	GetOrder(ctx echo.Context, orderId string) error
	// Update order status
	// (PUT /orders/{orderId})
	UpdateOrderStatus(ctx echo.Context, orderId string) error
	// List all products
	// (GET /products)
	ListProducts(ctx echo.Context, params ListProductsParams) error
	// Create a new product
	// (POST /products)
	CreateProduct(ctx echo.Context) error
	// Delete product
	// (DELETE /products/{productId})
	DeleteProduct(ctx echo.Context, productId string) error
	// Get product by ID
	// (GET /products/{productId})
	GetProduct(ctx echo.Context, productId string) error
	// Update product
	// (PUT /products/{productId})
	UpdateProduct(ctx echo.Context, productId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListCustomers converts echo context to params.
func (w *ServerInterfaceWrapper) ListCustomers(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCustomersParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListCustomers(ctx, params)
	return err
}

// CreateCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCustomer(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCustomer(ctx)
	return err
}

// DeleteCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCustomer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithOptions("simple", "customerId", ctx.Param("customerId"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customerId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCustomer(ctx, customerId)
	return err
}

// GetCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithOptions("simple", "customerId", ctx.Param("customerId"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customerId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCustomer(ctx, customerId)
	return err
}

// UpdateCustomer converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCustomer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithOptions("simple", "customerId", ctx.Param("customerId"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customerId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCustomer(ctx, customerId)
	return err
}

// GetCustomerOrders converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomerOrders(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithOptions("simple", "customerId", ctx.Param("customerId"), &customerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customerId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCustomerOrdersParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCustomerOrders(ctx, customerId, params)
	return err
}

// ListOrders converts echo context to params.
func (w *ServerInterfaceWrapper) ListOrders(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListOrdersParams
	// ------------- Optional query parameter "customer_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "customer_id", ctx.QueryParams(), &params.CustomerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customer_id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListOrders(ctx, params)
	return err
}

// CreateOrder converts echo context to params.
func (w *ServerInterfaceWrapper) CreateOrder(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateOrder(ctx)
	return err
}

// GetOrder converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderId" -------------
	var orderId string

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", ctx.Param("orderId"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrder(ctx, orderId)
	return err
}

// UpdateOrderStatus converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateOrderStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "orderId" -------------
	var orderId string

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", ctx.Param("orderId"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateOrderStatus(ctx, orderId)
	return err
}

// ListProducts converts echo context to params.
func (w *ServerInterfaceWrapper) ListProducts(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListProductsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListProducts(ctx, params)
	return err
}

// CreateProduct converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProduct(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateProduct(ctx)
	return err
}

// DeleteProduct converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProduct(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productId" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "productId", ctx.Param("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProduct(ctx, productId)
	return err
}

// GetProduct converts echo context to params.
func (w *ServerInterfaceWrapper) GetProduct(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productId" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "productId", ctx.Param("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProduct(ctx, productId)
	return err
}

// UpdateProduct converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateProduct(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "productId" -------------
	var productId string

	err = runtime.BindStyledParameterWithOptions("simple", "productId", ctx.Param("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter productId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateProduct(ctx, productId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/customers", wrapper.ListCustomers)
	router.POST(baseURL+"/customers", wrapper.CreateCustomer)
	router.DELETE(baseURL+"/customers/:customerId", wrapper.DeleteCustomer)
	router.GET(baseURL+"/customers/:customerId", wrapper.GetCustomer)
	router.PUT(baseURL+"/customers/:customerId", wrapper.UpdateCustomer)
	router.GET(baseURL+"/customers/:customerId/orders", wrapper.GetCustomerOrders)
	router.GET(baseURL+"/orders", wrapper.ListOrders)
	router.POST(baseURL+"/orders", wrapper.CreateOrder)
	router.GET(baseURL+"/orders/:orderId", wrapper.GetOrder)
	router.PUT(baseURL+"/orders/:orderId", wrapper.UpdateOrderStatus)
	router.GET(baseURL+"/products", wrapper.ListProducts)
	router.POST(baseURL+"/products", wrapper.CreateProduct)
	router.DELETE(baseURL+"/products/:productId", wrapper.DeleteProduct)
	router.GET(baseURL+"/products/:productId", wrapper.GetProduct)
	router.PUT(baseURL+"/products/:productId", wrapper.UpdateProduct)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//+aYshKnkcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
